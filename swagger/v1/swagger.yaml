# openapi: 3.0.1
# info:
#   title: Movie Explorer API
#   version: v1
#   description: API for managing movies, genres, subscriptions, watchlists, and user authentication.
#   contact:
#     name: MovieExplorer- Team II
# servers:
#   - url: https://movie-ror-priyanshu-singh.onrender.com
#     description: Production server
#   - url: http://localhost:3000
#     description: Local development server
# paths:
#   /api/v1/register:
#     post:
#       summary: Register a new user
#       tags:
#         - Authentication
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 user:
#                   type: object
#                   properties:
#                     email:
#                       type: string
#                       example: user@example.com
#                     password:
#                       type: string
#                       example: Password123
#                     password_confirmation:
#                       type: string
#                       example: Password123
#                     phone_number:
#                       type: string
#                       example: 9234567890
#                     name:
#                       type: string
#                       example: John Doe
#                   required:
#                     - email
#                     - password
#                     - password_confirmation
#                     - phone_number
#                     - name
#               required:
#                 - user
#       responses:
#         '201':
#           description: User registered successfully
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/AuthResponse'
#         '422':
#           description: Validation errors
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ValidationErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/login:
#     post:
#       summary: Log in a user
#       tags:
#         - Authentication
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 user:
#                   type: object
#                   properties:
#                     email:
#                       type: string
#                       example: user@example.com
#                     password:
#                       type: string
#                       example: Password123
#                   required:
#                     - email
#                     - password
#               required:
#                 - user
#       responses:
#         '200':
#           description: User logged in successfully
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/AuthResponse'
#         '401':
#           description: Invalid credentials
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/auth/google:
#     post:
#       summary: Authenticate with Google
#       tags:
#         - Authentication
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 access_token:
#                   type: string
#                   example: ya29.a0AfH6...
#               required:
#                 - access_token
#       responses:
#         '200':
#           description: Successfully authenticated with Google
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/AuthResponse'
#         '401':
#           description: Invalid Google token
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/refresh-token:
#     post:
#       summary: Refresh authentication tokens
#       tags:
#         - Authentication
#       description: Requires a valid refresh_token cookie
#       responses:
#         '200':
#           description: Tokens refreshed successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Tokens refreshed successfully
#                   auth_info:
#                     $ref: '#/components/schemas/AuthInfo'
#         '401':
#           description: Invalid refresh token
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/logout:
#     delete:
#       summary: Log out a user
#       tags:
#         - Authentication
#       security:
#         - BearerAuth: []
#       responses:
#         '200':
#           description: User logged out successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Successfully signed out
#                   auth_info:
#                     type: object
#                     properties:
#                       status:
#                         type: string
#                         example: logged_out
#                       tokens_cleared:
#                         type: boolean
#                         example: true
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/profile:
#     get:
#       summary: Retrieve user profile
#       tags:
#         - Authentication
#       security:
#         - BearerAuth: []
#       responses:
#         '200':
#           description: User profile retrieved successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   user:
#                     $ref: '#/components/schemas/User'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#     put:
#       summary: Update user profile
#       tags:
#         - Authentication
#       security:
#         - BearerAuth: []
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 user:
#                   type: object
#                   properties:
#                     email:
#                       type: string
#                       example: newemail@example.com
#                     phone_number:
#                       type: string
#                       example: +1987654321
#                     name:
#                       type: string
#                       example: Jane Doe
#       responses:
#         '200':
#           description: Profile updated successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   user:
#                     $ref: '#/components/schemas/User'
#                   message:
#                     type: string
#                     example: Profile updated successfully
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: Validation errors
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ValidationErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/genres:
#     get:
#       summary: List all genres
#       tags:
#         - Genres
#       responses:
#         '200':
#           description: List of genres
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/Genre'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#     post:
#       summary: Create a new genre
#       tags:
#         - Genres
#       security:
#         - BearerAuth: []
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 genre:
#                   type: object
#                   properties:
#                     name:
#                       type: string
#                       example: Action
#                   required:
#                     - name
#               required:
#                 - genre
#       responses:
#         '201':
#           description: Genre created successfully
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Genre'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '403':
#           description: Forbidden (requires admin/supervisor role)
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: Validation errors
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ValidationErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/genres/{id}:
#     get:
#       summary: Retrieve a genre by ID
#       tags:
#         - Genres
#       parameters:
#         - name: id
#           in: path
#           description: Genre ID
#           required: true
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: Genre details with associated movies
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   id:
#                     type: integer
#                   name:
#                     type: string
#                   movies:
#                     type: array
#                     items:
#                       $ref: '#/components/schemas/Movie'
#         '404':
#           description: Genre not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#     put:
#       summary: Update a genre
#       tags:
#         - Genres
#       security:
#         - BearerAuth: []
#       parameters:
#         - name: id
#           in: path
#           description: Genre ID
#           required: true
#           schema:
#             type: integer
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 genre:
#                   type: object
#                   properties:
#                     name:
#                       type: string
#                       example: Comedy
#                   required:
#                     - name
#               required:
#                 - genre
#       responses:
#         '200':
#           description: Genre updated successfully
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Genre'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '403':
#           description: Forbidden (requires admin/supervisor role)
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: Genre not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: Validation errors
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ValidationErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#     delete:
#       summary: Delete a genre
#       tags:
#         - Genres
#       security:
#         - BearerAuth: []
#       parameters:
#         - name: id
#           in: path
#           description: Genre ID
#           required: true
#           schema:
#             type: integer
#       responses:
#         '204':
#           description: Genre deleted successfully
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '403':
#           description: Forbidden (requires admin/supervisor role)
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: Genre not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: Genre has associated movies
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/movies:
#     get:
#       summary: List movies
#       tags:
#         - Movies
#       parameters:
#         - name: search
#           in: query
#           description: Search movies by title (case-insensitive)
#           required: false
#           schema:
#             type: string
#         - name: genre_id
#           in: query
#           description: Filter movies by genre ID
#           required: false
#           schema:
#             type: integer
#         - name: page
#           in: query
#           description: Page number for pagination (per_page fixed at 10)
#           required: false
#           schema:
#             type: integer
#             default: 1
#       responses:
#         '200':
#           description: List of movies with pagination metadata
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   movies:
#                     type: array
#                     items:
#                       $ref: '#/components/schemas/Movie'
#                   meta:
#                     type: object
#                     properties:
#                       current_page:
#                         type: integer
#                       total_pages:
#                         type: integer
#                       total_count:
#                         type: integer
#                 required:
#                   - movies
#                   - meta
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#     post:
#       summary: Create a new movie
#       tags:
#         - Movies
#       security:
#         - BearerAuth: []
#       requestBody:
#         content:
#           multipart/form-data:
#             schema:
#               type: object
#               properties:
#                 movie[title]:
#                   type: string
#                   example: Inception
#                 movie[release_year]:
#                   type: integer
#                   example: 2010
#                 movie[rating]:
#                   type: number
#                   format: float
#                   example: 8.8
#                 movie[genre_id]:
#                   type: integer
#                   example: 4
#                 movie[director]:
#                   type: string
#                   example: Christopher Nolan
#                 movie[duration]:
#                   type: integer
#                   example: 148
#                 movie[description]:
#                   type: string
#                   example: A thief with the ability to enter dreams...
#                 movie[main_lead]:
#                   type: string
#                   example: Leonardo DiCaprio
#                 movie[streaming_platform]:
#                   type: string
#                   example: Netflix
#                 movie[premium]:
#                   type: boolean
#                   example: true
#                 movie[poster]:
#                   type: string
#                   format: binary
#                 movie[banner]:
#                   type: string
#                   format: binary
#               required:
#                 - movie[title]
#                 - movie[release_year]
#                 - movie[rating]
#                 - movie[genre_id]
#       responses:
#         '201':
#           description: Movie created successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Movie created successfully
#                   movie:
#                     $ref: '#/components/schemas/Movie'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '403':
#           description: Forbidden (requires admin/supervisor role)
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: Validation errors
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ValidationErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/movies/{id}:
#     get:
#       summary: Retrieve a movie by ID
#       tags:
#         - Movies
#       parameters:
#         - name: id
#           in: path
#           description: Movie ID
#           required: true
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: Movie details
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Movie'
#         '403':
#           description: Premium subscription required
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: Movie not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#     put:
#       summary: Update a movie
#       tags:
#         - Movies
#       security:
#         - BearerAuth: []
#       parameters:
#         - name: id
#           in: path
#           description: Movie ID
#           required: true
#           schema:
#             type: integer
#       requestBody:
#         content:
#           multipart/form-data:
#             schema:
#               type: object
#               properties:
#                 movie[title]:
#                   type: string
#                 movie[release_year]:
#                   type: integer
#                 movie[rating]:
#                   type: number
#                   format: float
#                 movie[genre_id]:
#                   type: integer
#                 movie[director]:
#                   type: string
#                 movie[duration]:
#                   type: integer
#                 movie[description]:
#                   type: string
#                 movie[main_lead]:
#                   type: string
#                 movie[streaming_platform]:
#                   type: string
#                 movie[premium]:
#                   type: boolean
#                 movie[poster]:
#                   type: string
#                   format: binary
#                 movie[banner]:
#                   type: string
#                   format: binary
#       responses:
#         '200':
#           description: Movie updated successfully
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Movie'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '403':
#           description: Forbidden (requires admin/supervisor role)
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: Movie not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: Validation errors
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ValidationErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#     delete:
#       summary: Delete a movie
#       tags:
#         - Movies
#       security:
#         - BearerAuth: []
#       parameters:
#         - name: id
#           in: path
#           description: Movie ID
#           required: true
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: Movie deleted successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Movie deleted successfully
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '403':
#           description: Forbidden (requires admin/supervisor role)
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: Movie not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: Failed to delete movie
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/subscriptions:
#     get:
#       summary: List user subscriptions
#       tags:
#         - Subscriptions
#       security:
#         - BearerAuth: []
#       responses:
#         '200':
#           description: List of subscriptions
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   subscriptions:
#                     type: array
#                     items:
#                       $ref: '#/components/schemas/Subscription'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#     post:
#       summary: Create a new subscription
#       tags:
#         - Subscriptions
#       security:
#         - BearerAuth: []
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 plan_type:
#                   type: string
#                   enum:
#                     - basic
#                     - premium
#                   example: premium
#               required:
#                 - plan_type
#       responses:
#         '200':
#           description: Subscription created, redirect to Stripe checkout
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   session_id:
#                     type: string
#                   url:
#                     type: string
#                   subscription:
#                     $ref: '#/components/schemas/Subscription'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: Invalid plan type or active subscription exists
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Stripe configuration error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/subscriptions/success:
#     get:
#       summary: Handle successful subscription payment
#       tags:
#         - Subscriptions
#       parameters:
#         - name: session_id
#           in: query
#           description: Stripe checkout session ID
#           required: true
#           schema:
#             type: string
#       responses:
#         '200':
#           description: Subscription updated successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Subscription activated
#                   subscription:
#                     $ref: '#/components/schemas/Subscription'
#         '422':
#           description: Failed to complete subscription
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/subscriptions/cancel:
#     get:
#       summary: Handle cancelled subscription payment
#       tags:
#         - Subscriptions
#       responses:
#         '200':
#           description: Payment cancelled
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Payment cancelled
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/subscriptions/active:
#     get:
#       summary: Retrieve active subscription
#       tags:
#         - Subscriptions
#       security:
#         - BearerAuth: []
#       responses:
#         '200':
#           description: Active subscription details
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   subscription:
#                     $ref: '#/components/schemas/Subscription'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: No active subscription found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/subscriptions/{id}:
#     get:
#       summary: Retrieve a subscription by ID
#       tags:
#         - Subscriptions
#       security:
#         - BearerAuth: []
#       parameters:
#         - name: id
#           in: path
#           description: Subscription ID
#           required: true
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: Subscription details
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   subscription:
#                     $ref: '#/components/schemas/Subscription'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: Subscription not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/watchlist:
#     get:
#       summary: List watchlisted movies
#       tags:
#         - Watchlist
#       security:
#         - BearerAuth: []
#       responses:
#         '200':
#           description: List of watchlisted movies
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/Movie'
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/watchlist/{movie_id}:
#     post:
#       summary: Toggle movie in watchlist
#       tags:
#         - Watchlist
#       security:
#         - BearerAuth: []
#       parameters:
#         - name: movie_id
#           in: path
#           description: Movie ID
#           required: true
#           schema:
#             type: integer
#       responses:
#         '201':
#           description: Movie added to watchlist
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Watchlist'
#         '200':
#           description: Movie removed from watchlist
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Movie removed from watchlist
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '404':
#           description: Movie not found
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/notifications/device-token:
#     post:
#       summary: Update device token for push notifications
#       tags:
#         - Notifications
#       security:
#         - BearerAuth: []
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 device_token:
#                   type: string
#                   example: abc123xyz456exampletoken
#               required:
#                 - device_token
#       responses:
#         '200':
#           description: Device token updated successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Device token updated successfully
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: Device token is required
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/notifications/toggle:
#     post:
#       summary: Toggle push notifications
#       tags:
#         - Notifications
#       security:
#         - BearerAuth: []
#       responses:
#         '200':
#           description: Notifications toggled successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Notifications enabled
#                   notifications_enabled:
#                     type: boolean
#                     example: true
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#   /api/v1/notifications/test:
#     post:
#       summary: Send test push notification
#       tags:
#         - Notifications
#       security:
#         - BearerAuth: []
#       responses:
#         '200':
#           description: Test notification sent successfully
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   message:
#                     type: string
#                     example: Test notification sent successfully
#         '401':
#           description: Unauthorized
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '422':
#           description: No device token registered
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#         '500':
#           description: Server error
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
# components:
#   securitySchemes:
#     BearerAuth:
#       type: http
#       scheme: bearer
#       bearerFormat: JWT
#   schemas:
#     User:
#       type: object
#       properties:
#         id:
#           type: integer
#         email:
#           type: string
#         phone_number:
#           type: string
#         name:
#           type: string
#         role:
#           type: string
#           enum:
#             - user
#             - supervisor
#             - admin
#         created_at:
#           type: string
#           format: date-time
#         updated_at:
#           type: string
#           format: date-time
#         plan_type:
#           type: string
#           enum:
#             - free
#             - premium
#           nullable: true
#           description: The user's active subscription plan
#       required:
#         - id
#         - email
#         - name
#         - role
#         - created_at
#         - updated_at
#     AuthInfo:
#       type: object
#       properties:
#         status:
#           type: string
#           example: authenticated
#         token_type:
#           type: string
#           example: Bearer
#         access_token:
#           type: object
#           properties:
#             present:
#               type: boolean
#             expires_in:
#               type: integer
#             expires_at:
#               type: integer
#             token:
#               type: string
#               nullable: true
#         refresh_token:
#           type: object
#           properties:
#             present:
#               type: boolean
#             expires_in:
#               type: integer
#             expires_at:
#               type: integer
#             token:
#               type: string
#               nullable: true
#         cookie_info:
#           type: object
#           properties:
#             access_token_cookie:
#               type: string
#             refresh_token_cookie:
#               type: string
#             secure:
#               type: boolean
#             same_site:
#               type: string
#       required:
#         - status
#         - token_type
#         - access_token
#         - refresh_token
#         - cookie_info
#     Genre:
#       type: object
#       properties:
#         id:
#           type: integer
#         name:
#           type: string
#         created_at:
#           type: string
#           format: date-time
#         updated_at:
#           type: string
#           format: date-time
#       required:
#         - id
#         - name
#         - created_at
#         - updated_at
#     Movie:
#       type: object
#       properties:
#         id:
#           type: integer
#         title:
#           type: string
#         release_year:
#           type: integer
#         rating:
#           type: number
#           format: float
#         genre:
#           $ref: '#/components/schemas/Genre'
#         director:
#           type: string
#         duration:
#           type: integer
#         description:
#           type: string
#         main_lead:
#           type: string
#         streaming_platform:
#           type: string
#           nullable: true
#           description: The streaming platform where the movie is available
#         premium:
#           type: boolean
#         poster_url:
#           type: string
#           nullable: true
#           description: Cloudinary-generated poster URL
#         banner_url:
#           type: string
#           nullable: true
#           description: Cloudinary-generated banner URL
#         created_at:
#           type: string
#           format: date-time
#         updated_at:
#           type: string
#           format: date-time
#         watchlisted:
#           type: boolean
#           description: Indicates if the movie is in the authenticated user's watchlist; false if user is not authenticated
#           example: false
#       required:
#         - id
#         - title
#         - release_year
#         - rating
#         - genre
#         - duration
#         - premium
#         - created_at
#         - updated_at
#         - watchlisted
#     Subscription:
#       type: object
#       properties:
#         id:
#           type: integer
#         plan_type:
#           type: string
#           enum:
#             - basic
#             - premium
#         status:
#           type: string
#           enum:
#             - pending
#             - active
#             - cancelled
#         start_date:
#           type: string
#           format: date
#         end_date:
#           type: string
#           format: date
#         stripe_customer_id:
#           type: string
#           nullable: true
#         stripe_subscription_id:
#           type: string
#           nullable: true
#         created_at:
#           type: string
#           format: date-time
#         updated_at:
#           type: string
#           format: date-time
#       required:
#         - id
#         - plan_type
#         - status
#         - start_date
#         - created_at
#         - updated_at
#     Watchlist:
#       type: object
#       properties:
#         id:
#           type: integer
#         user_id:
#           type: integer
#         movie_id:
#           type: integer
#         created_at:
#           type: string
#           format: date-time
#         updated_at:
#           type: string
#           format: date-time
#       required:
#         - id
#         - user_id
#         - movie_id
#         - created_at
#         - updated_at
#     AuthResponse:
#       type: object
#       properties:
#         user:
#           $ref: '#/components/schemas/User'
#         auth_info:
#           $ref: '#/components/schemas/AuthInfo'
#         message:
#           type: string
#           example: User registered successfully
#       required:
#         - user
#         - auth_info
#         - message
#     ErrorResponse:
#       type: object
#       properties:
#         error:
#           type: string
#           example: An error occurred
#       required:
#         - error
#     ValidationErrorResponse:
#       type: object
#       properties:
#         errors:
#           type: array
#           items:
#             type: string
#       required:
#         - errors
# security:
#   - BearerAuth: []
openapi: 3.0.1
info:
  title: Movie Explorer API
  version: v1
  description: API for managing movies, genres, subscriptions, watchlists, and user authentication.
  contact:
    name: MovieExplorer- Team II
servers:
  - url: https://movie-ror-priyanshu-singh.onrender.com
    description: Production server
  - url: http://localhost:3000
    description: Local development server
paths:
  /api/v1/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: user@example.com
                    password:
                      type: string
                      example: Password123
                    password_confirmation:
                      type: string
                      example: Password123
                    phone_number:
                      type: string
                      example: 9234567890
                    name:
                      type: string
                      example: John Doe
                  required:
                    - email
                    - password
                    - password_confirmation
                    - phone_number
                    - name
              required:
                - user
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/login:
    post:
      summary: Log in a user
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: user@example.com
                    password:
                      type: string
                      example: Password123
                  required:
                    - email
                    - password
              required:
                - user
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/auth/google:
    post:
      summary: Authenticate with Google
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: ya29.a0AfH6...
              required:
                - access_token
      responses:
        '200':
          description: Successfully authenticated with Google
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid Google token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/refresh-token:
    post:
      summary: Refresh authentication tokens
      tags:
        - Authentication
      description: Requires a valid refresh_token cookie
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tokens refreshed successfully
                  auth_info:
                    $ref: '#/components/schemas/AuthInfo'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/logout:
    delete:
      summary: Log out a user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully signed out
                  auth_info:
                    type: object
                    properties:
                      status:
                        type: string
                        example: logged_out
                      tokens_cleared:
                        type: boolean
                        example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/profile:
    get:
      summary: Retrieve user profile
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user profile
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: newemail@example.com
                    phone_number:
                      type: string
                      example: +1987654321
                    name:
                      type: string
                      example: Jane Doe
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Profile updated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/genres:
    get:
      summary: List all genres
      tags:
        - Genres
      responses:
        '200':
          description: List of genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new genre
      tags:
        - Genres
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                genre:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Action
                  required:
                    - name
              required:
                - genre
      responses:
        '201':
          description: Genre created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (requires admin/supervisor role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/genres/{id}:
    get:
      summary: Retrieve a genre by ID
      tags:
        - Genres
      parameters:
        - name: id
          in: path
          description: Genre ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Genre details with associated movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
        '404':
          description: Genre not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a genre
      tags:
        - Genres
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Genre ID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                genre:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Comedy
                  required:
                    - name
              required:
                - genre
      responses:
        '200':
          description: Genre updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (requires admin/supervisor role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Genre not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a genre
      tags:
        - Genres
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Genre ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Genre deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (requires admin/supervisor role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Genre not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Genre has associated movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/movies:
    get:
      summary: List movies
      tags:
        - Movies
      parameters:
        - name: search
          in: query
          description: Search movies by title (case-insensitive)
          required: false
          schema:
            type: string
        - name: genre_id
          in: query
          description: Filter movies by genre ID
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination (per_page fixed at 10)
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: List of movies with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                required:
                  - movies
                  - meta
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new movie
      tags:
        - Movies
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  example: Inception
                movie[release_year]:
                  type: integer
                  example: 2010
                movie[rating]:
                  type: number
                  format: float
                  example: 8.8
                movie[genre_id]:
                  type: integer
                  example: 4
                movie[director]:
                  type: string
                  example: Christopher Nolan
                movie[duration]:
                  type: integer
                  example: 148
                movie[description]:
                  type: string
                  example: A thief with the ability to enter dreams...
                movie[main_lead]:
                  type: string
                  example: Leonardo DiCaprio
                movie[streaming_platform]:
                  type: string
                  example: Netflix
                movie[premium]:
                  type: boolean
                  example: true
                movie[poster]:
                  type: string
                  format: binary
                movie[banner]:
                  type: string
                  format: binary
                movie[trailer]:
                  type: string
                  example: https://www.youtube.com/watch?v=YoHD9XEInc0
                  description: URL to the movie trailer (e.g., YouTube link)
              required:
                - movie[title]
                - movie[release_year]
                - movie[rating]
                - movie[genre_id]
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie created successfully
                  movie:
                    $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (requires admin/supervisor role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/movies/{id}:
    get:
      summary: Retrieve a movie by ID
      tags:
        - Movies
      parameters:
        - name: id
          in: path
          description: Movie ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Movie details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '403':
          description: Premium subscription required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a movie
      tags:
        - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Movie ID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                movie[release_year]:
                  type: integer
                movie[rating]:
                  type: number
                  format: float
                movie[genre_id]:
                  type: integer
                movie[director]:
                  type: string
                movie[duration]:
                  type: integer
                movie[description]:
                  type: string
                movie[main_lead]:
                  type: string
                movie[streaming_platform]:
                  type: string
                movie[premium]:
                  type: boolean
                movie[poster]:
                  type: string
                  format: binary
                movie[banner]:
                  type: string
                  format: binary
                movie[trailer]:
                  type: string
                  example: https://www.youtube.com/watch?v=YoHD9XEInc0
                  description: URL to the movie trailer (e.g., YouTube link)
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (requires admin/supervisor role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a movie
      tags:
        - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Movie ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (requires admin/supervisor role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Failed to delete movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/subscriptions:
    get:
      summary: List user subscriptions
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new subscription
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_type:
                  type: string
                  enum:
                    - basic
                    - premium
                  example: premium
              required:
                - plan_type
      responses:
        '200':
          description: Subscription created, redirect to Stripe checkout
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                  url:
                    type: string
                  subscription:
                    $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid plan type or active subscription exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/subscriptions/success:
    get:
      summary: Handle successful subscription payment
      tags:
        - Subscriptions
      parameters:
        - name: session_id
          in: query
          description: Stripe checkout session ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Subscription updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Subscription activated
                  subscription:
                    $ref: '#/components/schemas/Subscription'
        '422':
          description: Failed to complete subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/subscriptions/cancel:
    get:
      summary: Handle cancelled subscription payment
      tags:
        - Subscriptions
      responses:
        '200':
          description: Payment cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Payment cancelled
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/subscriptions/active:
    get:
      summary: Retrieve active subscription
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Active subscription details
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription:
                    $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No active subscription found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/subscriptions/{id}:
    get:
      summary: Retrieve a subscription by ID
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Subscription ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subscription details
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription:
                    $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/watchlist:
    get:
      summary: List watchlisted movies
      tags:
        - Watchlist
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of watchlisted movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/watchlist/{movie_id}:
    post:
      summary: Toggle movie in watchlist
      tags:
        - Watchlist
      security:
        - BearerAuth: []
      parameters:
        - name: movie_id
          in: path
          description: Movie ID
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Movie added to watchlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Watchlist'
        '200':
          description: Movie removed from watchlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie removed from watchlist
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/notifications/device-token:
    post:
      summary: Update device token for push notifications
      tags:
        - Notifications
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                device_token:
                  type: string
                  example: abc123xyz456exampletoken
              required:
                - device_token
      responses:
        '200':
          description: Device token updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Device token updated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Device token is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/notifications/toggle:
    post:
      summary: Toggle push notifications
      tags:
        - Notifications
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Notifications toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notifications enabled
                  notifications_enabled:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/notifications/test:
    post:
      summary: Send test push notification
      tags:
        - Notifications
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Test notification sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Test notification sent successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: No device token registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        phone_number:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - user
            - supervisor
            - admin
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        plan_type:
          type: string
          enum:
            - free
            - premium
          nullable: true
          description: The user's active subscription plan
      required:
        - id
        - email
        - name
        - role
        - created_at
        - updated_at
    AuthInfo:
      type: object
      properties:
        status:
          type: string
          example: authenticated
        token_type:
          type: string
          example: Bearer
        access_token:
          type: object
          properties:
            present:
              type: boolean
            expires_in:
              type: integer
            expires_at:
              type: integer
            token:
              type: string
              nullable: true
        refresh_token:
          type: object
          properties:
            present:
              type: boolean
            expires_in:
              type: integer
            expires_at:
              type: integer
            token:
              type: string
              nullable: true
        cookie_info:
          type: object
          properties:
            access_token_cookie:
              type: string
            refresh_token_cookie:
              type: string
            secure:
              type: boolean
            same_site:
              type: string
      required:
        - status
        - token_type
        - access_token
        - refresh_token
        - cookie_info
    Genre:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - created_at
        - updated_at
    Movie:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        release_year:
          type: integer
        rating:
          type: number
          format: float
        genre:
          $ref: '#/components/schemas/Genre'
        director:
          type: string
        duration:
          type: integer
        description:
          type: string
        main_lead:
          type: string
        streaming_platform:
          type: string
          nullable: true
          description: The streaming platform where the movie is available
        premium:
          type: boolean
        poster_url:
          type: string
          nullable: true
          description: Cloudinary-generated poster URL
        banner_url:
          type: string
          nullable: true
          description: Cloudinary-generated banner URL
        trailer:
          type: string
          nullable: true
          description: URL to the movie trailer (e.g., YouTube link)
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        watchlisted:
          type: boolean
          description: Indicates if the movie is in the authenticated user's watchlist; false if user is not authenticated
          example: false
      required:
        - id
        - title
        - release_year
        - rating
        - genre
        - duration
        - premium
        - created_at
        - updated_at
        - watchlisted
    Subscription:
      type: object
      properties:
        id:
          type: integer
        plan_type:
          type: string
          enum:
            - basic
            - premium
        status:
          type: string
          enum:
            - pending
            - active
            - cancelled
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        stripe_customer_id:
          type: string
          nullable: true
        stripe_subscription_id:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - plan_type
        - status
        - start_date
        - created_at
        - updated_at
    Watchlist:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        movie_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - movie_id
        - created_at
        - updated_at
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        auth_info:
          $ref: '#/components/schemas/AuthInfo'
        message:
          type: string
          example: User registered successfully
      required:
        - user
        - auth_info
        - message
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: An error occurred
      required:
        - error
    ValidationErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
      required:
        - errors
security:
  - BearerAuth: []