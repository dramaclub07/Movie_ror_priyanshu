---
openapi: 3.0.1
info:
  title: Movie Explorer API
  version: v1
  description: API for managing movies, genres, subscriptions, and user authentication
servers:
  - url: https://movie-ror-priyanshu-singh.onrender.com
    description: Production server (Render)
  - url: http://localhost:3000
    description: Local development server
paths:
  "/api/v1/auth/sign_up":
    post:
      summary: User registration
      tags:
        - Authentication
      parameters: []
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      phone_number:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                  message:
                    type: string
                    example: "User created successfully"
                  auth_info:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "authenticated"
                      token_type:
                        type: string
                        example: "Bearer"
                      access_token:
                        type: object
                        properties:
                          present:
                            type: boolean
                          expires_in:
                            type: integer
                          expires_at:
                            type: integer
                          token:
                            type: string
                            nullable: true
                      refresh_token:
                        type: object
                        properties:
                          present:
                            type: boolean
                          expires_in:
                            type: integer
                          expires_at:
                            type: integer
                          token:
                            type: string
                            nullable: true
                      cookie_info:
                        type: object
                        properties:
                          access_token_cookie:
                            type: string
                          refresh_token_cookie:
                            type: string
                          secure:
                            type: boolean
                          same_site:
                            type: string
        '422':
          description: Invalid registration request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                  debug_info:
                    type: object
                    properties:
                      params:
                        type: object
                      validation_errors:
                        type: object
        '500':
          description: Registration failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Registration failed"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
                    password_confirmation:
                      type: string
                    phone_number:
                      type: string
                    name:
                      type: string
                  required:
                    - email
                    - password
                    - password_confirmation
                    - phone_number
                    - name
              required:
                - user
  "/api/v1/auth/sign_in":
    post:
      summary: User login
      tags:
        - Authentication
      parameters: []
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      phone_number:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                  message:
                    type: string
                    example: "Logged in successfully"
                  auth_info:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "authenticated"
                      token_type:
                        type: string
                        example: "Bearer"
                      access_token:
                        type: object
                        properties:
                          present:
                            type: boolean
                          expires_in:
                            type: integer
                          expires_at:
                            type: integer
                          token:
                            type: string
                            nullable: true
                      refresh_token:
                        type: object
                        properties:
                          present:
                            type: boolean
                          expires_in:
                            type: integer
                          expires_at:
                            type: integer
                          token:
                            type: string
                            nullable: true
                      cookie_info:
                        type: object
                        properties:
                          access_token_cookie:
                            type: string
                          refresh_token_cookie:
                            type: string
                          secure:
                            type: boolean
                          same_site:
                            type: string
        '401':
          description: Unauthorized login attempt
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password"
        '500':
          description: Login failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Login failed"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
                  required:
                    - email
                    - password
              required:
                - user
  "/api/v1/auth/google":
    post:
      summary: Google authentication
      tags:
        - Authentication
      parameters: []
      responses:
        '200':
          description: Successfully authenticated with Google
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      phone_number:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                  message:
                    type: string
                    example: "Successfully authenticated with Google"
                  auth_info:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "authenticated"
                      token_type:
                        type: string
                        example: "Bearer"
                      access_token:
                        type: object
                        properties:
                          present:
                            type: boolean
                          expires_in:
                            type: integer
                          expires_at:
                            type: integer
                          token:
                            type: string
                            nullable: true
                      refresh_token:
                        type: object
                        properties:
                          present:
                            type: boolean
                          expires_in:
                            type: integer
                          expires_at:
                            type: integer
                          token:
                            type: string
                            nullable: true
                      cookie_info:
                        type: object
                        properties:
                          access_token_cookie:
                            type: string
                          refresh_token_cookie:
                            type: string
                          secure:
                            type: boolean
                          same_site:
                            type: string
        '401':
          description: Invalid Google token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid Google token"
        '500':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Authentication failed"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
              required:
                - access_token
  "/api/v1/auth/refresh_token":
    post:
      summary: Refresh authentication tokens
      tags:
        - Authentication
      parameters: []
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tokens refreshed successfully"
                  auth_info:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "authenticated"
                      token_type:
                        type: string
                        example: "Bearer"
                      access_token:
                        type: object
                        properties:
                          present:
                            type: boolean
                          expires_in:
                            type: integer
                          expires_at:
                            type: integer
                          token:
                            type: string
                            nullable: true
                      refresh_token:
                        type: object
                        properties:
                          present:
                            type: boolean
                          expires_in:
                            type: integer
                          expires_at:
                            type: integer
                          token:
                            type: string
                            nullable: true
                      cookie_info:
                        type: object
                        properties:
                          access_token_cookie:
                            type: string
                          refresh_token_cookie:
                            type: string
                          secure:
                            type: boolean
                          same_site:
                            type: string
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid refresh token"
        '500':
          description: Token refresh failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Token refresh failed"
  "/api/v1/auth/sign_out":
    delete:
      summary: User logout
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully signed out"
                  auth_info:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "logged_out"
                      tokens_cleared:
                        type: boolean
                        example: true
        '500':
          description: Sign out failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Sign out failed"
  "/api/v1/genres":
    get:
      summary: List genres
      tags:
        - Genres
      responses:
        '200':
          description: List of genres
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
    post:
      summary: Create a new genre
      tags:
        - Genres
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                genre:
                  type: object
                  properties:
                    name:
                      type: string
                  required:
                    - name
              required:
                - genre
      responses:
        '201':
          description: Genre created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  "/api/v1/genres/{id}":
    get:
      summary: Fetch a genre by ID
      tags:
        - Genres
      parameters:
        - name: id
          in: path
          description: ID of the genre
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Genre details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
        '404':
          description: Genre not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Genre not found"
    put:
      summary: Update a genre
      tags:
        - Genres
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the genre to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                genre:
                  type: object
                  properties:
                    name:
                      type: string
                  required:
                    - name
              required:
                - genre
      responses:
        '200':
          description: Genre updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '404':
          description: Genre not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Genre not found"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
    delete:
      summary: Delete a genre
      tags:
        - Genres
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the genre to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Genre deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '422':
          description: Genre has associated movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cannot delete genre with associated movies"
  "/api/v1/movies":
    get:
      summary: List movies
      tags:
        - Movies
      parameters:
        - name: search
          in: query
          description: Search movies by title (case-insensitive)
          required: false
          schema:
            type: string
        - name: genre_id
          in: query
          description: Filter movies by genre ID
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of movies per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
    post:
      summary: Create a new movie
      tags:
        - Movies
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  description: Title of the movie
                movie[release_year]:
                  type: integer
                  description: Release year of the movie
                movie[rating]:
                  type: number
                  format: float
                  description: Rating of the movie (0 to 10)
                movie[genre_id]:
                  type: integer
                  description: ID of the genre
                movie[director]:
                  type: string
                  description: Director of the movie
                movie[duration]:
                  type: integer
                  description: Duration of the movie in minutes
                movie[description]:
                  type: string
                  description: Description of the movie (max 1000 characters)
                movie[main_lead]:
                  type: string
                  description: Main lead actor/actress of the movie
                movie[streaming_platform]:
                  type: string
                  description: Streaming platform (e.g., Amazon, Netflix, Hulu, Disney+, HBO)
                movie[premium]:
                  type: boolean
                  description: Whether the movie is premium
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (JPEG or PNG)
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (JPEG or PNG)
              required:
                - movie[title]
                - movie[release_year]
                - movie[rating]
                - movie[genre_id]
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie created successfully"
                  movie:
                    $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  "/api/v1/movies/{id}":
    get:
      summary: Fetch a movie by ID
      tags:
        - Movies
      parameters:
        - name: id
          in: path
          description: ID of the movie
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Movie details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
    put:
      summary: Update a movie
      tags:
        - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the movie to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  description: Title of the movie
                movie[release_year]:
                  type: integer
                  description: Release year of the movie
                movie[rating]:
                  type: number
                  format: float
                  description: Rating of the movie (0 to 10)
                movie[genre_id]:
                  type: integer
                  description: ID of the genre
                movie[director]:
                  type: string
                  description: Director of the movie
                movie[duration]:
                  type: integer
                  description: Duration of the movie in minutes
                movie[description]:
                  type: string
                  description: Description of the movie (max 1000 characters)
                movie[main_lead]:
                  type: string
                  description: Main lead actor/actress of the movie
                movie[streaming_platform]:
                  type: string
                  description: Streaming platform (e.g., Amazon, Netflix, Hulu, Disney+, HBO)
                movie[premium]:
                  type: boolean
                  description: Whether the movie is premium
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (JPEG or PNG)
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (JPEG or PNG)
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
    delete:
      summary: Delete a movie
      tags:
        - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the movie to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
        '422':
          description: Movie has active subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cannot delete movie with active subscriptions"
  "/api/v1/subscriptions":
    get:
      summary: List subscriptions
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You need to sign in or sign up before continuing."
    post:
      summary: Create a new subscription
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                subscription:
                  type: object
                  properties:
                    plan_type:
                      type: string
                      enum: ["basic", "premium"]
                    status:
                      type: string
                      enum: ["active", "inactive"]
                    start_date:
                      type: string
                      format: date
                    end_date:
                      type: string
                      format: date
                  required:
                    - plan_type
                    - status
              required:
                - subscription
      responses:
        '201':
          description: Subscription created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "in or sign up before continuing."
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  "/api/v1/subscriptions/active":
    get:
      summary: Fetch active subscription
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Active subscription details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You need to sign in or sign up before continuing."
        '404':
          description: No active subscription found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No active subscription found"
  "/api/v1/subscriptions/history":
    get:
      summary: Fetch subscription history
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Subscription history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You need to sign in or sign up before continuing."
  "/api/v1/subscriptions/{id}":
    get:
      summary: Fetch a subscription by ID
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the subscription
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subscription details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  plan_type:
                    type: string
                  status:
                    type: string
                  start_date:
                    type: string
                    format: date
                  end_date:
                    type: string
                    format: date
                  movie:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      release_year:
                        type: integer
                      rating:
                        type: number
                        format: float
                      poster_url:
                        type: string
                        nullable: true
                      banner_url:
                        type: string
                        nullable: true
                      genre:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You need to sign in or sign up before continuing."
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subscription not found"
    put:
      summary: Update a subscription
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the subscription to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                subscription:
                  type: object
                  properties:
                    plan_type:
                      type: string
                      enum: ["basic", "premium"]
                    status:
                      type: string
                      enum: ["active", "inactive"]
                    start_date:
                      type: string
                      format: date
                    end_date:
                      type: string
                      format: date
              required:
                - subscription
      responses:
        '200':
          description: Subscription updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You need to sign in or sign up before continuing."
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subscription not found"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
    delete:
      summary: Delete a subscription
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the subscription to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Subscription deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You need to sign in or sign up before continuing."
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subscription not found"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        release_year:
          type: integer
        rating:
          type: number
          format: float
        genre:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        director:
          type: string
        duration:
          type: integer
        description:
          type: string
        main_lead:
          type: string
        streaming_platform:
          type: string
        premium:
          type: boolean
        poster_url:
          type: string
          nullable: true
        banner_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - title
        - release_year
        - rating
        - genre
        - director
        - duration
        - description
        - main_lead
        - streaming_platform
    Subscription:
      type: object
      properties:
        id:
          type: integer
        plan_type:
          type: string
          enum: ["basic", "premium"]
        status:
          type: string
          enum: ["active", "inactive"]
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        movie:
          type: object
          properties:
            id:
              type: integer
            title:
              type: string
            release_year:
              type: integer
            rating:
              type: number
              format: float
            poster_url:
              type: string
              nullable: true
            banner_url:
              type: string
              nullable: true
            genre:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - plan_type
        - status
        - start_date
        - end_date